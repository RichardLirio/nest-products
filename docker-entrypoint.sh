#!/bin/sh

set -e # Sai imediatamente se um comando falhar.

echo "üöÄ Iniciando aplica√ß√£o NestJS com TypeORM..."

# --- Fun√ß√£o para Aguardar o Banco de Dados ---
wait_for_db() {
    echo "‚è≥ Aguardando banco de dados PostgreSQL ficar dispon√≠vel..."

    DB_HOST="${DATABASE_HOST:-postgres}" # 'postgres' √© o nome do servi√ßo no docker-compose
    DB_PORT="${DATABASE_PORT:-5432}"
    DB_USER="${DATABASE_USER:-postgres}"
    DB_NAME="${DATABASE_DB:-yourdatabase}" # Ajuste para o nome do seu banco de dados padr√£o

    if [ -n "$DATABASE_URL" ]; then
        echo "Usando DATABASE_URL para extrair credenciais de espera."
        DB_HOST=$(echo "$DATABASE_URL" | sed -n 's/.*@\([^:]*\):.*/\1/p' || echo "$DB_HOST")
        DB_PORT=$(echo "$DATABASE_URL" | sed -n 's/.*:\([0-9]*\)\/.*/\1/p' || echo "$DB_PORT")
        DB_USER=$(echo "$DATABASE_URL" | sed -n 's/.*\/\/\([^:]*\):.*/\1/p' || echo "$DB_USER")
        DB_NAME=$(echo "$DATABASE_URL" | sed -n 's/.*\/\/[^/]*\/\([^?]*\).*/\1/p' || echo "$DB_NAME")
    fi

    echo "Par√¢metros de conex√£o para espera: Host=$DB_HOST, Porta=$DB_PORT, Usu√°rio=$DB_USER, Banco=$DB_NAME"

    local timeout=30
    local count=0
    while ! nc -z "$DB_HOST" "$DB_PORT" >/dev/null 2>&1; do
        if [ $count -ge $timeout ]; then
            echo "‚ùå ERRO: Timeout aguardando a porta do banco de dados $DB_HOST:$DB_PORT."
            exit 1
        fi
        echo "üîÑ Porta do banco de dados n√£o dispon√≠vel ainda, aguardando 1 segundo... ($((timeout - count))s restantes)"
        sleep 1
        count=$((count + 1))
    done
    echo "‚úÖ Porta do banco de dados $DB_HOST:$DB_PORT est√° aberta."

    count=0
    while ! pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" >/dev/null 2>&1; do
        if [ $count -ge $timeout ]; then
            echo "‚ùå ERRO: Timeout aguardando o banco de dados $DB_NAME em $DB_HOST:$DB_PORT estar pronto."
            exit 1
        fi
        echo "üîÑ Banco de dados ainda n√£o pronto para comandos SQL, aguardando 1 segundo... ($((timeout - count))s restantes)"
        sleep 1
        count=$((count + 1))
    done
    echo "‚úÖ Banco de dados $DB_NAME est√° dispon√≠vel e pronto para comandos SQL!"
}

run_typeorm_migrations() {
    echo "üóÑÔ∏è Executando migra√ß√µes do TypeORM..."

    if npm run migration:run; then
        echo "‚úÖ Migra√ß√µes TypeORM executadas com sucesso!"
    else
        echo "‚ö†Ô∏è ATEN√á√ÉO: Falha ao executar migra√ß√µes TypeORM. Verifique os logs acima para detalhes."
    fi
}

# --- Fun√ß√£o Principal ---
main() {
    # 1. Aguarda o banco de dados
    wait_for_db

    # 2. Executa migra√ß√µes TypeORM
    # A execu√ß√£o das migra√ß√µes s√≥ ocorre se a conex√£o com o DB for bem-sucedida.
    run_typeorm_migrations

    echo "üéâ Prepara√ß√£o conclu√≠da. Iniciando aplica√ß√£o..."

    # Executa o comando principal passado como argumento (ex: dumb-init npm run dev)
    exec "$@"
}

# --- Execu√ß√£o do Script ---
if [ "$1" = "migrate" ]; then
    echo "Modo de migra√ß√µes manual detectado."
    wait_for_db 
    run_typeorm_migrations
    echo "Opera√ß√£o de migra√ß√µes manual conclu√≠da."
    exit 0
fi

main "$@"