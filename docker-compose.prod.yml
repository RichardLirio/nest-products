
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile 
      target: production 
    container_name: api-products
    ports:
      - '3333:3333' 
    environment:
      - PORT=${PORT}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_DB=${DATABASE_DB}
      - DATABASE_URL=${DATABASE_URL}
      - VERSION=${VERSION}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy 
    networks:
      - api-products-network 
    restart: unless-stopped 
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  postgres:
    container_name: api-products-pg 
    image: postgres:latest 
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_DB}
      - PGDATA=/data/postgres 
    volumes:
      - ./data/pg:/data/postgres
    networks: 
      - api-products-network 
    restart: unless-stopped 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_DB}"]
      interval: 10s 
      timeout: 5s 
      retries: 5

networks:
  api-products-network:
    driver: bridge 